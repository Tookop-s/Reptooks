[Bash](https://www.gnu.org/software/bash/manual/bash.html)
[shell](https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_05_03)


2 usecase :
- interactively (input from keyboard)
- non-interactively (input read from a file)

allows the execution synchronously and asynchronously (exec one after an other or in parallel)

builtins = cmds built directly inside the shell code

blank
A space or tab character.

builtin
A command that is implemented internally by the shell itself, rather than by an executable program somewhere in the file system.

control operator
A token that performs a control function. It is a newline or one of the following: ‘||’, ‘&&’, ‘&’, ‘;’, ‘;;’, ‘;&’, ‘;;&’, ‘|’, ‘|&’, ‘(’, or ‘)’.

exit status
The value returned by a command to its caller. The value is restricted to eight bits, so the maximum value is 255.

field
A unit of text that is the result of one of the shell expansions. After expansion, when executing a command, the resulting fields are used as the command name and arguments.

filename
A string of characters used to identify a file.

job
A set of processes comprising a pipeline, and any processes descended from it, that are all in the same process group.

job control
A mechanism by which users can selectively stop (suspend) and restart (resume) execution of processes.

metacharacter
A character that, when unquoted, separates words. A metacharacter is a space, tab, newline, or one of the following characters: ‘|’, ‘&’, ‘;’, ‘(’, ‘)’, ‘<’, or ‘>’.

name
A word consisting solely of letters, numbers, and underscores, and beginning with a letter or underscore. Names are used as shell variable and function names. Also referred to as an identifier.

operator
A control operator or a redirection operator. See Redirections, for a list of redirection operators. Operators contain at least one unquoted metacharacter.

process group
A collection of related processes each having the same process group ID.

process group ID
A unique identifier that represents a process group during its lifetime.

reserved word
A word that has a special meaning to the shell. Most reserved words introduce shell flow control constructs, such as for and while.

return status
A synonym for exit status.

signal
A mechanism by which a process may be notified by the kernel of an event occurring in the system.

special builtin
A shell builtin command that has been classified as special by the POSIX standard.

token
A sequence of characters considered a single unit by the shell. It is either a word or an operator.

word
A sequence of characters treated as a unit by the shell. Words may not include unquoted metacharacters.



shell syntax in order

ignore comments (# at the beginning of the line)

tokenize the input (words, operators, quotes, ...) 

parse the tokens to understand the structure (identifies the command name, arguments, and any operators or special characters used to modify the command's behavior.)

expansion, wildcard (expand * to match filename), variable ($PATH),

redirections 

execution (if builtin exec directly, if not look for the cmd in the PATH and exec the first matching executable it finds)

exit status wait for the cmd to finish and capture its exit status 

order = ignore comments --> tokenize --> parse --> expand --> redirect --> execute --> exit status

shell operation 

read its input (file or terminal)

[recognize tokens, here_doc processing](https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_05_03:~:text=2.3%20Token%20Recognition)

by metacharacters alias expansion is performed;

parse the token in cmd

expand  (*.c would expand to all files.c in the current directory)
Word spliting is done only if an expansion occurs on spaces, tabs, and newlines

need to check if we need to split based on \$IFS ? 

'' or "" are passed as empty strings 

special builtins are found before shell fu

removes all quotes and treat all char like literal char rather than special

single quotes preserve the literal value of chars within the quotes a single quote cannot occur between single quotes 

break the expanded token list in a list of filename with cmds an args

perform redirections and removes redirection operators and operands from the arg list 

execute the commands

optionnally wait for the cmds tocomplete and collect the exit status

no need to handle \

need to handle the input from the user if a quote or the content of a pipe is missing 

from left to right :
|| exec right if left fails
&& exec right if left succeed 
() exec in a subshell (ie (cd /tmp && ls)) the parent does not move to the tmp directory only the child does

if a cmd is receiving input from a pipe and a file redirection, it prioritize the redirection
we can create a subshell (ie : (echo lol | cat) < out.txt)

need to check if the token_word is a reserved word : if, then, else, elif, fi, do, done, case, esac, while, until, for, in, function, select, time;

Syntax errors : 

unmatched quotes, parenthesis

missing cmd ( If you use a pipe (|), redirection (<, >, >>, <<), or logical operator (&&, ||) but don't provide a command on one side, the shell will print a syntax error.)

$ echo "hello" >
zsh: parse error near `\n'

$ echo "hello" |
pipe> 

$ echo "hello" ||
cmdor> 

$ echo "hello" &&
cmdand> 

$ echo ("hello" 
> 

$ echo ("hello
dquote> 

$ echo "hello" >>>
zsh: parse error near `>'


Tokenization: The shell breaks the command line into tokens. For example, the command echo $var would be broken into two tokens: echo and $var.

Parsing: The shell interprets the tokens according to the shell's grammar rules. It identifies command names, arguments, redirections, and so on.

Expansion: The shell performs various expansions on the tokens. This includes tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and so on. After these expansions, $var would be replaced with its value.
(check ambiguity  ie : 
VAR=""
echo "Hello, World!" > $VAR
or 
unset VAR
echo "Hello, World!" > $VAR
need to check the $VAR with the env)
if LIM  is single quoted '' no variable expansion is done 

Word Splitting: After expansion, the shell splits the results into words or fields based on the IFS. If the value of $var was "one two three" and the IFS is a space, the shell would split this into three words: one, two, and three. word splitting is only performed on expanded variables.


need to keep an empty string if comming from the input, if comming from an expansion must be removed 

attention aux signaux dans le here_doc attention aux guillemets du limiteur et comportement 

binary tree, syntax check : 

```bash
(echo1 "Hello, World!" && echo2 "Hello again, World!" > file1.txt) || (cat1 < file2.txt | cat2 >> file3.txt && cat << EOF Hello, World! EOF)

(echo "Hello, World!" > file.txt && echo "Hello again, World!") || (cat << EOF Hello, World! EOF && cat < file.txt | cat >> file.txt)

echo "Hello, World!" && echo "Hello again, World!" >> file.txt || (cat < file.txt | cat > file.txt && at << EOF Hello, World! EOF)
```

priority : (from higest to lowest)

()
< > << >> in a struct 
|
&& 
||




(echo "Hello, World!" && (echo "This is a test." > output2.txt) > output1.txt) && (echo "This is a test." > output2.txt)

(echo "H" && (echo "N" > output.txt || (echo "F" > error.txt && cat error.txt) ) ) || echo "F" | cat > final_output.txt